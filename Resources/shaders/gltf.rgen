#version 460 core
#extension GL_EXT_ray_tracing : enable

layout(push_constant) uniform UniformPushConstant {
    mat4 inverseProjection;
    mat4 inverseView;
    uint maxDepth;
    uint specularSamples;
    uint diffuseSamples;
} in_upc;

layout (binding = ACCELERATION_BINDING, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(binding = OUTPUT_BINDING, set = 0, rgba8) uniform image2D out_image;

struct Payload
{
  vec3 color;
  uint depth;
  uint maxDepth;
  bool primitive;
  vec3 ray;
};

layout(location = 0) rayPayloadEXT Payload out_hitValue;

//

vec3 toLinear(vec3 color)
{
    return pow(color, vec3(2.2));
}

vec3 toNonLinear(vec3 color)
{
    return pow(color, vec3(1.0/2.2));
}

//

void main() 
{
	vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 ndc = uv * 2.0 - 1.0;

	vec4 target = in_upc.inverseProjection * vec4(ndc.x, ndc.y, 1.0, 1.0);
	target /= target.w;

	vec3 origin = vec3(in_upc.inverseView * vec4(0.0, 0.0, 0.0, 1.0));
	vec3 direction = mat3(in_upc.inverseView) * normalize(target.xyz);

	float tmin = 0.1;
	float tmax = 100.0;

    out_hitValue.color = vec3(0.0);
    out_hitValue.depth = 0;
    out_hitValue.maxDepth = in_upc.maxDepth;
    out_hitValue.primitive = false;
    out_hitValue.ray = direction;

    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin, direction, tmax, 0);
	
	// Gamma correction, as raytracing into non-SRGB framebuffer.
	imageStore(out_image, ivec2(gl_LaunchIDEXT.xy), vec4(toNonLinear(out_hitValue.color), 0.0));
}
